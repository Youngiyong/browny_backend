service: browny-backend
plugins:
  - serverless-webpack
  - serverless-offline
configValidationMode: error
frameworkVersion: '2'
# env 파일 사용
custom:
  # service application 내 전역적으로 사용하는 서비스 네임, 기본 리소스명이기도 함
  SERVICE_NAME: ${self:service}-${self:provider.stage}
  webpack:
    webpackConfig: 'webpack.config.js'
    packager: 'yarn'
    includeModules: true
provider:
  name: aws
  runtime: nodejs12.x
  region: ap-northeast-2
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'dev'}
  deploymentBucket:
    blockPublicAccess: true # Prevents public access via ACLs or bucket policies. Default is false
    name: brownytest-deploy # Deployment bucket name. Default is generated by the framework
    maxPreviousDeploymentArtifacts: 5 # On every deployment the framework prunes the bucket to remove artifacts older than this limit. The default is 5L

  environment:
    DEBUG: true
    # https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/node-reusing-connections.html
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    # 기본 : 배포설정, argements 로 입력
    STAGE: ${self:provider.stage}
    # 기본 : labda 타임존 설정
    TZ: "Asia/Seoul"

    # 리소스 설정
    RDS_TYPE: postgres
    RDS_PORT: 5432
    RDS_USERNAME: username
    RDS_DATABASE: databasename
    RDS_HOSTNAME: hostname
    RDS_PASSWORD: password
    JWT_SECRET_KEY: secretkey
    # S3_AWS_ACCESS_KEY_ID: ${env:S3_AWS_ACCESS_KEY_ID}
    # S3_AWS_SECRET_ACCESS_KEY: ${env:S3_AWS_SECRET_ACCESS_KEY}
    GOOGLE_CLIENT_ID: clientId
    GOOGLE_CLIENT_SECRET: secretkey
    GOOGLE_REDIRECT_PATH: callback
    GITHUB_CLIENT_ID: clientid
    GITHUB_CLIENT_SECRET: secretkey
    GITHUB_REDIRECT_PATH: callback
  vpc:
    # securityGroupIds:
    #   - sg-0c26def52725027a2
    # subnetIds:
    #   - subnet-068eb19616780adb7 #public-subnet-a
    #   - subnet-0a5fe2e2a9acd001d #public-subnet-b
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "s3:*"
      Resource: "*"
    # api.doc will call apigateway api
    - Effect: Allow
      Action:
        - "apigateway:*"
      Resource: "*"
    - Effect: Allow
      Action:
        - "dynamodb:*"
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - "apigateway:*"
      Resource: "*"

functions:
  auth:
    handler: src/lib/middlewares/authorized.run
  hellofunction:
    handler: src/handler.hello
    events:
      - http:
          path: hello
          method: get
  createuser:
    handler: src/routes/v1/users/post.run
    description: "회원 등록 API"
    events:
      - http:
          path: v1/users
          method: post
          authorizer: auth
  getuser:
    handler: src/routes/v1/users/get.run
    description: "회원 조회 API"
    events:
      - http:
          path: v1/users/{user_id}
          method: get
          authorizer: auth
          integration: lambda
          cors:
            origin: "*"
            headers: "*"
          private: false
  login:
    handler: src/routes/v1/auth/login.run
    events:
      - http:
          path: v1/auth/login
          method: post

  signin:
    handler: src/routes/v1/auth/signin.run
    events:
      - http:
          path: v1/auth/signin
          method: get
          integration: lambda
          cors:
            origin: "*"
            headers: "*"
          private: false
  callback:
    handler: src/routes/v1/auth/callback.run
    events:
      - http:
          path: v1/auth/{provider}/callback
          method: get
          integration: lambda
          response:
            headers:
              Content-Type: integration.response.header.Content-Type
          #     # Content-Type: "'text/html'"
          #     Content-Type: "'application/json'"
              # Content-Type: integration.response.header.Content-Type
          cors:
            origin: "*"
            headers: "*"
            # cookies: "*"
          private: false
  redirect:
    handler: src/routes/v1/auth/redirect.run
    events:
      - http:
          path: v1/auth/{provider}/redirect
          method: get
          integration: lambda
          cors:
            origin: "*"
            headers: "*"
          private: false
refresh:
    handler: src/routes/v1/auth/refresh.run
    events:
      - http:
          path: v1/auth/refresh
          method: post
          cors:
            origin: "*"
            headers: "*"
          private: false
  s3upload:
    handler: src/routes/v1/images/upload.run
    events:
      - http:
          method: post
          path: v1/upload/{folder}/{user_id}
          authorizer: auth
          cors:
            origin: "*"
            headers: "*"
          private: false
  deleteProfileImage:
    handler: src/routes/v1/users/profile.deleteProfileImage
    events:
      - http:
          method: delete
          path: v1/users/profile/{user_id}/thumnail
          authorizer: auth
          integration: lambda
          cors:
            origin: "*"
            headers: "*"
          private: false
  putProfile:
    handler: src/routes/v1/users/profile.putProfile
    events:
      - http:
          method: put
          path: v1/users/profile/{user_id}
          authorizer: auth
          integration: lambda
          cors:
            origin: "*"
            headers: "*"
          private: false
  joinMemberShip:
    handler: src/routes/v1/auth/login.joinMemberShip
    description: "비밀번호 찾기시 이메일 확인 API "
    events:
      - http:
          method: post
          path: v1/users
          cors:
            origin: "*"
            headers: "*"
          private: false
  updatesendEmailAuth:
    handler: src/routes/v1/auth/login.updateSendEmailAuth
    description: "회원가입 이메일 재요청"
    events:
      - http:
          method: put
          path: v1/auth/email_auth
          cors:
            origin: "*"
            headers: "*"
          private: false
  sendEmailAuth:
    handler: src/routes/v1/auth/login.sendEmailAuth
    description: "회원가입시 이메일 인증 확인 API"
    events:
      - http:
          method: post
          path: v1/auth/email_auth
          cors:
            origin: "*"
            headers: "*"
          private: false
  changePasswdByEmail:
    handler: src/routes/v1/auth/login.changePasswdByEmail
    description: "비밀번호 찾기시 이메일 인증 API"
    events:
      - http:
          method: post
          path: v1/users/email_auth
          integration: lambda
          cors:
            origin: "*"
            headers: "*"
          private: false
  loginByEmailAndPassword:
    handler: src/routes/v1/auth/login.loginByEmailAndPassword
    description: "이메일/패스워드 로그인 API"
    events:
      - http:
          method: post
          path: v1/auth/login
          cors:
            origin: "*"
            headers: "*"
          private: false
  logout:
    handler: src/routes/v1/auth/logout
    description: "로그아웃 API"
    events:
      - http:
          method: put
          path: v1/auth/logout
          cors:
            origin: "*"
            headers: "*"
          private: false
  getUserFollowsAPI:
    handler: src/routes/v1/users/follow.getUserFollowsAPI
    events:
      - http:
          method: get
          path: v1/users/{user_id}/follows
          authorizer: auth
          cors:
            origin: "*"
            headers: "*"
          private: false
  getUserFollowersAPI:
    handler: src/routes/v1/users/follow.getUserFollowersAPI
    events:
      - http:
          method: get
          path: v1/users/{user_id}/followers
          authorizer: auth
          cors:
            origin: "*"
            headers: "*"
          private: false
  postUserFollowAPI:
    handler: src/routes/v1/users/follow.postUserFollowAPI
    events:
      - http:
          method: post
          path: v1/users/follows
          authorizer: auth
          cors:
            origin: "*"
            headers: "*"
          private: false
  deleteUserFollowAPI:
    handler: src/routes/v1/users/follow.deleteUserFollowAPI
    events:
      - http:
          method: delete
          path: v1/users/{user_id}/follows/{user_follow_id}
          authorizer: auth
          cors:
            origin: "*"
            headers: "*"
          private: false
resources:
  Description: email_auth
  Resources:
    EmailCodeAuthTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: email_auth
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3