service: browny-backend
plugins:
  - serverless-webpack
  - serverless-offline
configValidationMode: error
frameworkVersion: '2'
# env 파일 사용
custom:
  # service application 내 전역적으로 사용하는 서비스 네임, 기본 리소스명이기도 함
  SERVICE_NAME: ${self:service}-${self:provider.stage}
  webpack:
    webpackConfig: 'webpack.config.js'
    packager: 'yarn'
    includeModules: true
provider:
  name: aws
  runtime: nodejs12.x
  region: ap-northeast-2
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'dev'}
  deploymentBucket:
    blockPublicAccess: true # Prevents public access via ACLs or bucket policies. Default is false
    name: brownytest-deploy # Deployment bucket name. Default is generated by the framework
    maxPreviousDeploymentArtifacts: 5 # On every deployment the framework prunes the bucket to remove artifacts older than this limit. The default is 5L

  environment:
    DEBUG: true
    # https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/node-reusing-connections.html
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    # 기본 : 배포설정, argements 로 입력
    STAGE: ${self:provider.stage}
    # 기본 : labda 타임존 설정
    TZ: "Asia/Seoul"

    # 리소스 설정
    RDS_TYPE: postgres
    RDS_PORT: 5432
    RDS_USERNAME: browny
    RDS_DATABASE: browny
    RDS_HOSTNAME: 1234
    RDS_PASSWORD: 1234
    JWT_SECRET_KEY: 1234
    # S3_AWS_ACCESS_KEY_ID: ${env:S3_AWS_ACCESS_KEY_ID}
    # S3_AWS_SECRET_ACCESS_KEY: ${env:S3_AWS_SECRET_ACCESS_KEY}
    GOOGLE_CLIENT_ID: clientId
    GOOGLE_CLIENT_SECRET: secretkey
    GOOGLE_REDIRECT_PATH: callback
    GITHUB_CLIENT_ID: clientid
    GITHUB_CLIENT_SECRET: secretkey
    GITHUB_REDIRECT_PATH: callback
  vpc:
    # securityGroupIds:
    #   - sg-0c26def52725027a2
    # subnetIds:
    #   - subnet-068eb19616780adb7 #public-subnet-a
    #   - subnet-0a5fe2e2a9acd001d #public-subnet-b
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "s3:*"
      Resource: "*"
    # api.doc will call apigateway api
    - Effect: Allow
      Action:
        - "apigateway:*"
      Resource: "*"
    - Effect: Allow
      Action:
        - "dynamodb:*"
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - "apigateway:*"
      Resource: "*"

functions:
  auth:
    handler: src/lib/middlewares/authorized.run
  hellofunction:
    handler: src/handler.hello
    events:
      - http:
          path: hello
          method: get
  createuser:
    handler: src/routes/v1/users/post.run
    description: "회원 등록 API"
    events:
      - http:
          path: v1/users
          method: post
          authorizer: auth
  getuser:
    handler: src/routes/v1/users/get.run
    description: "회원 조회 API"
    events:
      - http:
          path: v1/users/{user_id}
          method: get
          authorizer: auth
          integration: lambda
          cors:
            origin: "*"
            headers: "*"
          private: false
  login:
    handler: src/routes/v1/auth/login.run
    events:
      - http:
          path: v1/auth/login
          method: post

  signin:
    handler: src/routes/v1/auth/signin.run
    events:
      - http:
          path: v1/auth/signin
          method: get
          integration: lambda
          cors:
            origin: "*"
            headers: "*"
          private: false
  callback:
    handler: src/routes/v1/auth/callback.run
    events:
      - http:
          path: v1/auth/{provider}/callback
          method: get
          integration: lambda
          response:
            headers:
              Content-Type: integration.response.header.Content-Type
          #     # Content-Type: "'text/html'"
          #     Content-Type: "'application/json'"
              # Content-Type: integration.response.header.Content-Type
          cors:
            origin: "*"
            headers: "*"
            # cookies: "*"
          private: false
  redirect:
    handler: src/routes/v1/auth/redirect.run
    events:
      - http:
          path: v1/auth/{provider}/redirect
          method: get
          integration: lambda
          cors:
            origin: "*"
            headers: "*"
          private: false
  refresh:
    handler: src/routes/v1/auth/refresh.run
    events:
      - http:
          path: v1/auth/refresh
          method: get
          integration: lambda
          cors:
            origin: "*"
            headers: "*"
          private: false
# resources:
#   Description: auth_email
#   Resources:
#     MyroMemberTable:
#       Type: AWS::DynamoDB::Table
#       Properties:
#         TableName: auth_email
#         AttributeDefinitions:
#           - AttributeName: "id"
#             AttributeType: "S"
#         KeySchema:
#           - AttributeName: "id"
#             KeyType: HASH
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1